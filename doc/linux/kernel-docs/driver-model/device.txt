
基本设备结构
---

对于`struct device`数据结构可以参考内核参考文档。

编程接口
---

发现设备的总线驱动使用下面的方法向驱动核心层代码注册设备：

    int device_register(struct device * dev);

总线应该初始化下面的成员变量：

    - parent
    - name
    - bus_id
    - bus

当引用计数变为0时，设备将从内核中移除。引用计数可以使用以下方法进行调整：

    struct device * get_device(struct device * dev);
    void put_device(struct device * dev);

如果引用不是0，则get_device()函数返回一个指向`struct device`的指针（如果它已经被删除）。

驱动程序可以使用以下方法访问设备结构中的锁：

    void lock_device(struct device * dev);
    void unlock_device(struct device * dev);


## 设备属性

    struct device_attribute {
    	struct attribute	attr;
    	ssize_t (*show)(struct device *dev, struct device_attribute *attr,
    			char *buf);
    	ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    			 const char *buf, size_t count);
    };

设备的属性可以由设备驱动程序通过sysfs导出。

有关sysfs如何工作的更多信息，请参阅Documentation/filesystems/sysfs.txt。

如Documentation/kobject.txt中所述，必须在生成`KOBJ_ADD uevent`之前创建设备属性。 实现这一目标的唯一方法是定义属性组。

使用名为DEVICE_ATTR的宏声明属性：

    #define DEVICE_ATTR(name,mode,show,store)

例：

    static DEVICE_ATTR(type, 0444, show_type, NULL);
    static DEVICE_ATTR(power, 0644, show_power, store_power);

这声明了2个类型为`struct device_attribute`的结构体，分别命名为`dev_attr_type`和`dev_attr_power`。 这两个属性可以按如下方式组织成一个组：

    static struct attribute *dev_attrs[] = {
    	&dev_attr_type.attr,
    	&dev_attr_power.attr,
    	NULL,
    };

    static struct attribute_group dev_attr_group = {
    	.attrs = dev_attrs,
    };

    static const struct attribute_group *dev_attr_groups[] = {
    	&dev_attr_group,
    	NULL,
    };

然后，调用`device_register（）`之前，在`struct device`中设置组指针，可以将此数组与设备关联：

      dev->groups = dev_attr_groups;
      device_register(dev);

`device_register()`函数将会使用`groups`指针创建设备属性，而`device_unregister()`函数使用该指针移除设备属性。

**警告**：
虽然内核允许随时对设备调用`device_create_file`和`device_remove_file`这两个函数，但是用户空间对于什么时候创建属性有着自己的要求。 当一个新设备被注册到内核里时，就会产生一个uevent事件 ，并通知给用户空间（像`udev`）有一个新设备可用。如果在设备被注册之后添加设备属性， 用户空间得不到通知，用户空间就不会知道新属性。

这对于在驱动程序探测（`probe`）阶段，需要为设备添加属性时是非常重要的。如果设备驱动仅仅为传递给它的`device structure`调用`device_create_file()`函数，则用户空间永远不会被通知新的属性。