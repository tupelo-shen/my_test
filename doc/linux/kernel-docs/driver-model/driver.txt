
## 设备驱动

对于结构`struct device_driver`查看内核说明文档。

## 结构体device_driver的分配

设备驱动通常都是静态分配`device_driver`对象。虽然在系统中一个驱动往往支持多个设备，但是`struct device_driver`表示整个驱动程序（而不是特定的设备实例）。

## 初始化

设备驱动必须至少初始化`device_driver`的`name`和`bus`两个成员。还应该初始化`devclass`成员（当它到达时），以在内部获得正确的链接。 还应该尽可能地初始化回调函数，尽管，每个回调函数都是可选的。

## 声明

如上所述，`struct device_driver`对象是静态分配的，下面就是一个`eepro100`驱动程序的示例。这个声明仅仅是假设，用来说明使用；

    static struct device_driver eepro100_driver = {
        .name		= "eepro100",
        .bus		= &pci_bus_type,

        .probe		= eepro100_probe,
        .remove		= eepro100_remove,
        .suspend	= eepro100_suspend,
        .resume		= eepro100_resume,
    };

大部分驱动不能直接完整地转化成新驱动模型，因为它们所属的总线结构有自己特殊的成员，没法通用。

这最常见的例子就是设备ID结构。驱动通常定义一个数组，保存它所支持的设备ID。这些设备ID结构的格式和比较设备ID的方法完全与总线相关。为了尽量保证

所以，某个总线的驱动结构应该包含通用的`struct device_driver`，就像下面这样：

    struct pci_driver {
        const struct pci_device_id *id_table;
        struct device_driver	  driver;
    };

包含了与总线相关的成员之后的总线驱动实例应该如下所示：

    static struct pci_driver eepro100_driver = {
        .id_table       = eepro100_pci_tbl,
        .driver	       = {
            .name		= "eepro100",
            .bus		= &pci_bus_type,
            .probe		= eepro100_probe,
            .remove		= eepro100_remove,
            .suspend	= eepro100_suspend,
            .resume		= eepro100_resume,
        },
    };

有些人可能认为嵌入式结构体的初始化有些丑陋，但是，这是我们想到的最好方法...

## 注册

    int driver_register(struct device_driver * drv);

驱动程序在启动时，注册设备驱动结构。对于没有特定于总线的成员的驱动程序，使用`driver_register`注册即可，传递指向结构`struct device_driver`的指针。

但是，对于大部分使用与总线相关的数据结构的驱动程序来说，就需要使用类似于`pci_driver_register`的函数进行注册。

主要的是，驱动程序应尽可能早地注册它们的驱动数据结构。向驱动核心层注册，会初始化结构`device_driver`中的几个成员，包括引用计数器和`lock`。 假设这些成员一直有效且可以由设备模型核心层或总线驱动程序使用。

## 总线驱动的变换

通过定义封装函数，可以轻松地过渡到新的驱动模型。驱动程序完全忽略掉通用的驱动数据结构，让总线的这些特定的封装函数去填充对应的成员。对于回调函数，总线可以定义特定于总线的回调函数，用其代替通用驱动数据结构中的回调函数。

该解决方案仅仅是暂时的。为了在驱动中获取类信息，无论如何都必须修改驱动。因为转化驱动为新驱动模型应该会减少基础结构的复杂性和代码大小，所以还是推荐，在添加类信息时，将其转换。

## 驱动数据结构的访问

一旦数据对象被注册，就可以访问对象的一些常用成员了，像`lock`和设备列表。

    int driver_for_each_dev(struct device_driver * drv, void * data,
                            int (*callback)(struct device * dev, void * data));

`devices`成员是绑定到该驱动的所有设备的列表。内核驱动模型（LDM）核心层提供一个辅助函数，操作驱动控制的所有设备。如上所示，这个辅助函数， 在每个设备节点访问时锁定驱动，并在访问每个设备时对其进行适当的引用计数。


## sysfs

当驱动被注册时，在`sysfs`目录下的与其相关的总线目录下就会创建一个目录。在这个目录里，驱动会产生一个与用户空间交互的接口，用其控制驱动程序的操作。比如，切换驱动程序里的调试输出。

## 回调函数

	int	(*probe)(struct device * dev);

调用`probe()`函数时，锁定总线的读写信号量`rwsem`，将驱动程序的部分绑定到设备上。驱动通常使用`container_of()`方法，根据`dev`得到总线的类型，这是在`probe()`和其它程序中完成的。 获得的总线类型数据结构里，会提供设备资源数据，比如`pci_dev.resource[]`或者`platform_device.resources`,其除了用在`dev->platform_data`之外，还被用来初始化驱动。

This callback holds the driver-specific logic to bind the driver to a given device.  That includes verifying that the device is present, that it's a version the driver can handle, that driver data structures can be allocated and initialized, and that any hardware can be initialized. Drivers often store a pointer to their state with dev_set_drvdata(). When the driver has successfully bound itself to that device, then probe() returns zero and the driver model code will finish its part of binding the driver to that device.

A driver's probe() may return a negative errno value to indicate that the driver did not bind to this device, in which case it should have released all resources it allocated.

	int 	(*remove)	(struct device * dev);

remove is called to unbind a driver from a device. This may be
called if a device is physically removed from the system, if the
driver module is being unloaded, during a reboot sequence, or
in other cases.

It is up to the driver to determine if the device is present or
not. It should free any resources allocated specifically for the
device; i.e. anything in the device's driver_data field.

If the device is still present, it should quiesce the device and place
it into a supported low-power state.

	int	(*suspend)	(struct device * dev, pm_message_t state);

suspend is called to put the device in a low power state.

	int	(*resume)	(struct device * dev);

Resume is used to bring a device back from a low power state.


## 驱动属性

    struct driver_attribute {
            struct attribute        attr;
            ssize_t (*show)(struct device_driver *driver, char *buf);
            ssize_t (*store)(struct device_driver *, const char * buf, size_t count);
    };

Device drivers can export attributes via their sysfs directories. Drivers can declare attributes using a DRIVER_ATTR macro that works identically to the DEVICE_ATTR macro.

Example:

    DRIVER_ATTR(debug,0644,show_debug,store_debug);

这相当于：

    struct driver_attribute driver_attr_debug;

This can then be used to add and remove the attribute from the driver's directory using:

    int driver_create_file(struct device_driver *, const struct driver_attribute *);
    void driver_remove_file(struct device_driver *, const struct driver_attribute *);
