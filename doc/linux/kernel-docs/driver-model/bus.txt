
###总线类型

#### 1. 定义
---

对于`struct bus_type`可以查看内核说明文档

	int bus_register(struct bus_type * bus);


#### 2. 声明
---

内核中的每种总线类型（PCI、USB、等）都应该声明一个该总线类型的静态对象。`name`成员必须被初始化，`match`回调函数是否初始化是可选的。

	struct bus_type pci_bus_type = {
	       .name	= "pci",
	       .match	= pci_bus_match,
	};

该结构应该导出到驱动程序的头文件中，但一般情况下，驱动程序都会包含`pci.h`头文件，所以，在`pci.h`头文件中声明为全局变量即可。

	extern struct bus_type pci_bus_type;

#### 3. 注册
---

当`bus`驱动被初始化后，就会调用`bus_register`。在该函数内，初始化总线对象中的其它成员， 然后将其插入到总线的一个全局列表中。一旦，该总线对象被注册，它的成员对于总线驱动来说就是可用的。


#### 4. 回调函数
---

`match()`: 绑定驱动和设备

设备ID结构的格式和比较它们的方法本质上是特定于总线的。驱动通常在与总线相关的driver结构中声明一个它所支持的设备ID数组。

`match`回调函数就是比较驱动支持的设备ID和具体设备的ID，决定是否支持这个具体的设备。不会影响总线具体的功能和类型安全。

当驱动注册到总线上时，总线的设备列表就会被迭代，为每个还没有驱动的设备调用`match`函数。


#### 5. 设备和驱动列表
---

设备和驱动列表旨在取代大部分总线拥有的局部列表变量。 它们分别是`struct device`和`struct device_drivers`的列表。 总线驱动程序可以随意使用列表，但可能需要转换为总线特定类型。

`LDM`核心代码提供辅助函数，用于迭代每个列表：

	int bus_for_each_dev(struct bus_type * bus, struct device * start, void * data,
						int (*fn)(struct device *, void *));

	int bus_for_each_drv(struct bus_type * bus, struct device_driver * start,
			     		void * data, int (*fn)(struct device_driver *, void *));

这些辅助函数遍历相应的列表，为每一个设备或驱动调用相关的回调函数。所有的列表访问采用总线锁进行同步（目前read）。列表中的每个对象的引用计数在回调函数被调用之前加1；当取得下一个对象时，引用计数会减1。调用回调函数期间锁被释放掉。

#### 6. sysfs
---

会产生一个顶层目录，称为`bus`。

每个总线都会在bus目录下得到一个目录，在它下面有2个默认的目录：

	/sys/bus/pci/
	|-- devices
	`-- drivers

注册到总线上的驱动会在总线的`drivers`目录下得到一个目录：

	/sys/bus/pci/
	|-- devices
	`-- drivers
	    |-- Intel ICH
	    |-- Intel ICH Joystick
	    |-- agpgart
	    `-- e100

每一个类型的总线上的设备会在`devices`目录下得到一个符号链接，其指向实际物理结构中的设备目录：

	/sys/bus/pci/
	|-- devices
	|   |-- 00:00.0 -> ../../../root/pci0/00:00.0
	|   |-- 00:01.0 -> ../../../root/pci0/00:01.0
	|   `-- 00:02.0 -> ../../../root/pci0/00:02.0
	`-- drivers


#### 7. 导出属性
---

	struct bus_attribute {
		struct attribute	attr;
		ssize_t (*show)(struct bus_type *, char * buf);
		ssize_t (*store)(struct bus_type *, const char * buf, size_t count);
	};

总线驱动程序可以使用BUS_ATTR宏导出属性，该宏与设备的DEVICE_ATTR宏类似。 例如，这样的定义：

	static BUS_ATTR(debug,0644,show_debug,store_debug);

相当于声明：

	static bus_attribute bus_attr_debug;

然后，可以使用以下的函数在总线的`sysfs`目录中添加和删除属性：

	int bus_create_file(struct bus_type *, struct bus_attribute *);
	void bus_remove_file(struct bus_type *, struct bus_attribute *);


